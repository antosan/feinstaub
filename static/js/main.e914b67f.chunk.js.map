{"version":3,"sources":["SensorData.js","App.js","serviceWorker.js","index.js"],"names":["SensorData","_ref","sensorId","sensorType","location","timestamp","sensorDataValues","react_default","a","createElement","className","cx","border-black border-4","concat","format","map","sensordata","value","unit","value_type","key","id","Number","parseFloat","toFixed","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sensorData","sensorLocations","fetch","bind","assertThisInitialized","intervalId","setInterval","clearInterval","axios","get","response","results","data","sort","b","Date","getTime","sensor","filteredResults","sensorIds","forEach","res","includes","push","asyncToGenerator","regenerator_default","mark","_callee","latLon","wrap","_context","prev","next","String","latitude","longitude","_this2","nominatimGeocoder","sent","setState","abrupt","sensor_type","name","sensordatavalues","stop","_x","apply","arguments","Promise","all","console","error","_context2","t0","NOMINATIM_URL","display_name","_context3","length","src_SensorData","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e914b67f.chunk.js","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport { format } from 'date-fns';\n\nfunction SensorData({\n  sensorId,\n  sensorType,\n  location,\n  timestamp,\n  sensorDataValues,\n}) {\n  return (\n    <div\n      className={cx(\n        'flex flex-col bg-white max-w-sm shadow-lg rounded-lg overflow-hidden mb-4 p-5',\n        { 'border-black border-4': sensorId === 93 }\n      )}\n    >\n      <div className=\"flex flex-row justify-between\">\n        <span className=\"text-sm text-grey-dark uppercase\">\n          <span className=\"font-bold\">{`#${sensorId}`}</span> {sensorType}\n        </span>\n        <span className=\"text-sm text-grey-dark\">\n          {format(timestamp, 'hh:mm a')}\n        </span>\n      </div>\n      <div className=\"text-sm text-grey-dark pt-2\">{location}</div>\n      <div className=\"flex flex-row flex-wrap justify-between\">\n        {sensorDataValues.map(sensordata => {\n          const value = sensordata.value;\n          let unit = '';\n\n          switch (sensordata.value_type) {\n            case 'P1':\n              unit = 'PM10';\n              break;\n            case 'P2':\n              unit = 'PM2.5';\n              break;\n            case 'humidity':\n              unit = 'hum';\n              break;\n            case 'temperature':\n              unit = 'temp';\n              break;\n            case 'hdop':\n              unit = 'hdop';\n              break;\n            case 'ratioP2':\n              unit = 'ratioP2';\n              break;\n            case 'durP2':\n              unit = 'durP2';\n              break;\n            case 'ratioP1':\n              unit = 'ratioP1';\n              break;\n            case 'durP1':\n              unit = 'durP1';\n              break;\n            default:\n              break;\n          }\n\n          return (\n            <div key={sensordata.id} className=\"w-48 py-3\">\n              <span className=\"text-4xl\">\n                {Number.parseFloat(value).toFixed(2)}\n              </span>\n              <span className=\"text-xl\">{unit}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default SensorData;\n","import React from 'react';\nimport axios from 'axios';\nimport SensorData from './SensorData';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sensorData: [],\n      sensorLocations: {},\n    };\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetch();\n\n    this.intervalId = setInterval(this.fetch, 1000 * 60);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  async fetch() {\n    try {\n      const response = await axios.get(\n        'https://api.airquality.codeforafrica.org/v1/now/'\n      );\n      const results = response.data;\n\n      // sort results by timestamp - descending (newer results first)\n      results.sort(\n        (a, b) =>\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n\n      // Sort results by sensor ID - descending order\n      results.sort((a, b) => b.sensor.id - a.sensor.id);\n\n      // Get latest value for each sensor\n      const filteredResults = [];\n      const sensorIds = [];\n\n      results.forEach(res => {\n        if (!sensorIds.includes(res.sensor.id)) {\n          filteredResults.push(res);\n          sensorIds.push(res.sensor.id);\n        }\n      });\n\n      let sensorData = filteredResults.map(async data => {\n        const latLon =\n          String(data.location.latitude) + String(data.location.longitude);\n        const { sensorLocations } = this.state;\n        let location;\n\n        if (sensorLocations[latLon]) {\n          location = sensorLocations[latLon];\n        } else {\n          location = await this.nominatimGeocoder(\n            data.location.latitude,\n            data.location.longitude\n          );\n          sensorLocations[latLon] = location;\n          this.setState({ sensorLocations });\n        }\n\n        return {\n          id: data.id,\n          sensorId: data.sensor.id,\n          sensorType: data.sensor.sensor_type.name,\n          location,\n          timestamp: data.timestamp,\n          sensorDataValues: data.sensordatavalues,\n        };\n      });\n\n      sensorData = await Promise.all(sensorData);\n\n      this.setState({ sensorData });\n    } catch (error) {\n      console.error(error);\n      this.setState({ sensorData: [] });\n    }\n  }\n\n  async nominatimGeocoder(latitude, longitude) {\n    const NOMINATIM_URL = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&limit=1&lat=${latitude}&lon=${longitude}`;\n\n    try {\n      const response = await axios.get(NOMINATIM_URL);\n\n      return response.data.display_name;\n    } catch (error) {\n      console.error('nominatimGeocoder error -> ', error);\n      return '';\n    }\n  }\n\n  render() {\n    const { sensorData } = this.state;\n\n    return (\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"text-5xl text-center m-4\">\n          <span>{sensorData.length}</span>\n          <span className=\"text-2xl\">sensors</span>\n        </div>\n        <div className=\"flex flex-row flex-wrap justify-between\">\n          {sensorData.map(data => {\n            const {\n              id,\n              sensorId,\n              sensorType,\n              location,\n              timestamp,\n              sensorDataValues,\n            } = data;\n\n            return (\n              <SensorData\n                key={id}\n                sensorId={sensorId}\n                sensorType={sensorType}\n                location={location}\n                timestamp={timestamp}\n                sensorDataValues={sensorDataValues}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}