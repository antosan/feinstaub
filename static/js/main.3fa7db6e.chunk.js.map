{"version":3,"sources":["SensorData.js","App.js","serviceWorker.js","index.js"],"names":["SensorData","_ref","sensorId","sensorType","location","timestamp","sensorDataValues","react_default","a","createElement","className","concat","format","map","sensordata","value","unit","value_type","key","id","Number","parseFloat","toFixed","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sensorData","fetch","bind","assertThisInitialized","intervalId","setInterval","clearInterval","axios","get","response","results","data","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","t1","sensor","t2","sensor_type","name","_this2","nominatimGeocoder","latitude","longitude","t3","sent","t4","t5","sensordatavalues","abrupt","stop","_x","apply","arguments","Promise","all","sort","b","Date","getTime","sensorIds","forEach","res","includes","push","setState","console","error","_context2","NOMINATIM_URL","memFetch","memoize","fn","display_name","_context3","url","then","length","src_SensorData","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3fa7db6e.chunk.js","sourcesContent":["import React from 'react';\nimport { format } from 'date-fns';\n\nfunction SensorData({\n  sensorId,\n  sensorType,\n  location,\n  timestamp,\n  sensorDataValues,\n}) {\n  return (\n    <div className=\"flex flex-col bg-white max-w-sm shadow-lg rounded-lg overflow-hidden mb-4 p-5\">\n      <div className=\"flex flex-row justify-between\">\n        <span className=\"text-sm text-grey-dark uppercase\">\n          <span className=\"font-bold\">{`#${sensorId}`}</span> {sensorType}\n        </span>\n        <span className=\"text-sm text-grey-dark\">\n          {format(timestamp, 'hh:mm a')}\n        </span>\n      </div>\n      <div className=\"text-sm text-grey-dark pt-2\">{location}</div>\n      <div className=\"flex flex-row flex-wrap justify-between\">\n        {sensorDataValues.map(sensordata => {\n          const value = sensordata.value;\n          let unit = '';\n\n          switch (sensordata.value_type) {\n            case 'P1':\n              unit = 'PM10';\n              break;\n            case 'P2':\n              unit = 'PM2.5';\n              break;\n            case 'humidity':\n              unit = 'hum';\n              break;\n            case 'temperature':\n              unit = 'temp';\n              break;\n            case 'hdop':\n              unit = 'hdop';\n              break;\n            case 'ratioP2':\n              unit = 'ratioP2';\n              break;\n            case 'durP2':\n              unit = 'durP2';\n              break;\n            case 'ratioP1':\n              unit = 'ratioP1';\n              break;\n            case 'durP1':\n              unit = 'durP1';\n              break;\n            default:\n              break;\n          }\n\n          return (\n            <div key={sensordata.id} className=\"w-48 py-3\">\n              <span className=\"text-4xl\">\n                {Number.parseFloat(value).toFixed(2)}\n              </span>\n              <span className=\"text-xl\">{unit}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default SensorData;\n","import React from 'react';\nimport axios from 'axios';\nimport memoize from 'memoize-async';\nimport SensorData from './SensorData';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sensorData: [],\n    };\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetch();\n\n    this.intervalId = setInterval(this.fetch, 1000 * 60);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  async fetch() {\n    try {\n      const response = await axios.get(\n        'https://api.airquality.codeforafrica.org/v1/now/'\n      );\n\n      let results = response.data.map(async data => ({\n        id: data.id,\n        sensorId: data.sensor.id,\n        sensorType: data.sensor.sensor_type.name,\n        location: await this.nominatimGeocoder(\n          data.location.latitude,\n          data.location.longitude\n        ),\n        timestamp: data.timestamp,\n        sensorDataValues: data.sensordatavalues,\n      }));\n\n      results = await Promise.all(results);\n\n      // sort results by timestamp - descending (newer results first)\n      results.sort(\n        (a, b) =>\n          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      );\n\n      // Sort results by sensor ID - descending order\n      results.sort((a, b) => b.sensorId - a.sensorId);\n\n      // Get latest value for each sensor\n      const sensorData = [];\n      const sensorIds = [];\n\n      results.forEach(res => {\n        if (!sensorIds.includes(res.sensorId)) {\n          sensorData.push(res);\n          sensorIds.push(res.sensorId);\n        }\n      });\n\n      this.setState({ sensorData });\n    } catch (error) {\n      console.error(error);\n      this.setState({ sensorData: [] });\n    }\n  }\n\n  async nominatimGeocoder(latitude, longitude) {\n    const NOMINATIM_URL = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&limit=1&lat=${latitude}&lon=${longitude}`;\n    const memFetch = memoize(this.fn);\n\n    try {\n      const response = await memFetch(NOMINATIM_URL);\n\n      return response ? response.display_name : '';\n    } catch (error) {\n      console.error('nominatimGeocoder error -> ', error);\n      return '';\n    }\n  }\n\n  fn(url) {\n    axios.get(url).then(res => res.data);\n  }\n\n  render() {\n    const { sensorData } = this.state;\n\n    return (\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"text-5xl text-center m-4\">\n          <span>{sensorData.length}</span>\n          <span className=\"text-2xl\">sensors</span>\n        </div>\n        <div className=\"flex flex-row flex-wrap justify-between\">\n          {sensorData.map(data => {\n            const {\n              id,\n              sensorId,\n              sensorType,\n              location,\n              timestamp,\n              sensorDataValues,\n            } = data;\n\n            return (\n              <SensorData\n                key={id}\n                sensorId={sensorId}\n                sensorType={sensorType}\n                location={location}\n                timestamp={timestamp}\n                sensorDataValues={sensorDataValues}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}